#include <QPushButton>
#include <QLabel>
#include <QGraphicsProxyWidget>
#include <QRectF>
#include "Dificulties_Window.h"
#include "Game.h"
#include <iostream>
#include <thread>
#include "Pac_Man.h"
#include "GameWin.h"
#include "GameOver.h"

int vidas = 3;
int puntos = 0;
int nivel = 1;
bool nivel2 = false;
bool nivel3 = false;
bool nivel4 = false;
bool win = false;
bool loose = false;


Dificulties_Window::Dificulties_Window(QWidget *parent)
{
    //Creation of the scene
    QGraphicsScene *scene = new QGraphicsScene();
    scene->setSceneRect(0,0,800,600);
    scene->setBackgroundBrush(QBrush(QImage(":/Images/MENU.png")));

    QPushButton * easy_mode = new QPushButton("START GAME");
    easy_mode->setGeometry(0,0,170,50);
    QGraphicsProxyWidget *proxy = new QGraphicsProxyWidget(); //Widget that makes posible to use a QPushButton in a QGraphicsscene
    proxy->setWidget(easy_mode);
    scene->addItem(proxy);
    proxy->setPos(320,290);
    connect(easy_mode, &QPushButton::released, this, &Dificulties_Window::easy); //Method that will when the button is released

    //Creaction and configuration of normal mode button


    setScene(scene);
    setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    setFixedSize(800,600);

    QTimer* timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(checkwin()));
    timer->start(500);

    show();
    nivel1 = true;
}
void Dificulties_Window::checkwin() {
    if (nivel2 == true){
        nivel1 = false;
        nivel2 = false;
        pointsR = pointsR + 10;
        normal();
    }
    if (nivel3 == true){
        nivel3 = false;
        pointsR = pointsR + 10;
        classic();
    }
    if (nivel4 == true){
        nivel4 = false;
        pointsR = pointsR + 10;
        hard();
    }
    if (loose == true){
        loose = false;
        std::cout << "GAME OVER" << vidas << std::endl;
        this->close();
        delete this;
        GameOver *gameover = new GameOver();
        gameover->show();
    }
    if (win == true){
        std::cout << "WIN " << pointsR << std::endl;
        this->close();
        delete this;
        GameWin *gamewin = new GameWin();
        gamewin->show();
    }

}

void Dificulties_Window::easy()
{
    int points = 0;
    int lifes = 3;
    int mapa[21][30] = {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,1,1,1,1,1,0,1,1,1,1,9,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
            {0,1,0,0,0,1,0,1,0,0,0,13,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0},
            {0,1,0,1,1,1,1,1,0,1,1,12,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0},
            {0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0},
            {0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0},
            {0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0},
            {0,0,0,0,1,0,1,0,1,1,14,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0},
            {0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0},
            {0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0},
            {0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0},
            {0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0},
            {0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0},
            {0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0},
            {0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0},
            {0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0},
            {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0},
            {0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,11,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    };
    level_1 = new Game(mapa, 0, vidas);
    level_1->show();
    this->close();

}

void Dificulties_Window::normal()
{

    int mapa[21][30] = {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,11,1,1,1,1,0,1,1,1,1,9,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
            {0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0},
            {0,1,0,1,1,1,1,1,0,1,1,12,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,1,0},
            {0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0},
            {0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0},
            {0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0},
            {0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0},
            {0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0},
            {0,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0},
            {0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0},
            {0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0},
            {0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0},
            {0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0},
            {0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0},
            {0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0},
            {0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0},
            {0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0},
            {0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,11,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    };
    level_1->close();
    delete level_1;
    nivel = nivel + 1;
    std::this_thread::sleep_for(std::chrono::seconds(1));
    level_2 = new Game(mapa, 0, vidas);
    level_2->show();

}

void Dificulties_Window::classic()
{

    int mapa[21][30] = {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,1,1,1,1,1,0,1,1,1,1,9,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0},
            {0,1,0,0,0,1,0,1,0,0,0,13,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0},
            {0,1,0,1,0,1,1,1,0,1,1,12,0,1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0},
            {0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
            {0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0},
            {0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0},
            {0,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0},
            {0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0},
            {0,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0},
            {0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0},
            {0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0},
            {0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0},
            {0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0},
            {0,0,0,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0},
            {0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0},
            {0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0},
            {0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0},
            {0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,11,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,11,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    };


    level_2->close();
    delete level_2;
    nivel = nivel + 1;
    std::this_thread::sleep_for(std::chrono::seconds(1));
    level_3 = new Game(mapa, 0, vidas);
    level_3->show();
}
void Dificulties_Window::hard()
{
    int mapa[21][30] = {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,11,1,1,1,1,0,1,1,1,1,9,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,11,0},
            {0,1,0,0,0,1,0,1,0,0,0,13,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0},
            {0,1,1,1,0,1,1,1,0,1,1,12,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0},
            {0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0},
            {0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0},
            {0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0},
            {0,1,1,1,1,0,1,0,1,1,0,14,1,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0},
            {0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0},
            {0,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0},
            {0,1,1,1,1,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0},
            {0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0},
            {0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0},
            {0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0},
            {0,0,0,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0},
            {0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0},
            {0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0},
            {0,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0},
            {0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,0},
            {0,11,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,11,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    };
    level_3->close();
    delete level_3;
    nivel = nivel + 1;
    std::this_thread::sleep_for(std::chrono::seconds(1));
    level_4 = new Game(mapa, 0, vidas);
    level_4->show();
}

